# Цель: научиться создавать классы наследованные от класса Thread.
# Задача "За честь и отвагу!":
from threading import Thread
import time

class Knight(Thread):
    """класс Knight, наследованный от Thread, объекты которого будут обладать следующими свойствами:
    Атрибут name - имя рыцаря. (str)
    Атрибут power - сила рыцаря. (int)
    """
    def __init__(self, name, power):
        Thread.__init__(self)
        self.name = name
        self.power = power

    def run(self):
        """метод run, в котором рыцарь будет сражаться с врагами: При запуске потока должна выводится надпись
        "<Имя рыцаря>, на нас напали!". Рыцарь сражается до тех пор, пока не повергнет всех врагов
        (у всех потоков их 100).В процессе сражения количество врагов уменьшается на power текущего рыцаря.
        По прошествию 1 дня сражения (1 секунды) выводится строка "<Имя рыцаря> сражается <кол-во дней>...,
        осталось <кол-во воинов> воинов."
        После победы над всеми врагами выводится надпись "<Имя рыцаря> одержал победу спустя <кол-во дней> дней(дня)!"
        Как можно заметить нужно сделать задержку в 1 секунду, инструменты для задержки выберите сами.
        """
        print(f'{self.name}, на нас напали!')
        bot, day_war = 100, 1
        while bot > 0:
            time.sleep(1)
            bot -= self.power
            print(f'{self.name} сражается {day_war} дней(дня) ..., осталось {bot} воинов.')
            day_war += 1
        print(f'{self.name} одержал победу спустя {day_war} дней(дня)!')


first_knight = Knight('Sir Lancelot', 10)
second_knight = Knight("Sir Galahad", 20)
first_knight.start()
second_knight.start()
first_knight.join()
second_knight.join()
print('Все битвы закончились!')
